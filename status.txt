(function(){
  var LOOKUP_CAPTION  = "Project";
  var SECTION_TITLE   = "Rest of Form";
  var ID_CAPTION  = "Project ID";
  
  function wait(cb){var t=0;(function p(){ if(window.infowiseForm){cb();} else if(t++<200){setTimeout(p,50);} })();}

  wait(function(){
    function found(x){ return x ? "YES" : "NO"; }

    // Lookup field
    var project = null;
    try { project = infowiseForm.getField(LOOKUP_CAPTION); } catch(e){}

    // Section by title
    var section = null;
    try { section = infowiseForm.getSection(SECTION_TITLE); } catch(e){}

    // Fallback: section by CSS class
    var sectionEl = null;
    if (!section) {
      sectionEl = document.querySelector(".rest-of-form") || document.querySelector(".Rest.of.Form");
      if (sectionEl) {
        section = {
          setVisible: function (v) { sectionEl.style.display = v ? "" : "none"; },
          setReadOnly: function (ro) {
            sectionEl.querySelectorAll("input, select, textarea, button").forEach(function(n){ n.disabled = !!ro; });
          }
        };
      }
    }

    // ID copy field
    var idField = null;
    try { idField = infowiseForm.getField(IDCOPY_CAPTION); } catch(e){}

    alert(
      'Lookup "'+LOOKUP_CAPTION+'" found? ' + found(project) + '\n' +
      'Section by title "'+SECTION_TITLE+'" found? ' + found(section && section.setVisible) + '\n' +
      'ID field "'+IDCOPY_CAPTION+'" found? ' + found(idField)
    );

    if (!project) { alert('❌ Could not find lookup "'+LOOKUP_CAPTION+'". Change LOOKUP_CAPTION to the exact label on your form.'); return; }
    if (!section) { alert('❌ Could not find the section. Ensure the container header is "'+SECTION_TITLE+'", OR set CSS class "rest-of-form".'); return; }
    if (!idField) { alert('❌ Could not find ID field "'+IDCOPY_CAPTION+'". Check the exact label on the canvas.'); return; }

    function setVisible(v){ if (section && section.setVisible) section.setVisible(!!v); }
    function setId(v){ try { idField.setValue(v != null ? String(v) : ""); } catch(e){} }

    // Read the selected lookup ID (handles several shapes)
    function readProjectId(){
      try {
        if (typeof project.getLookupId === "function") {
          var id = project.getLookupId();
          if (id) return id;
        }
        if (typeof project.getValue === "function") {
          var v = project.getValue(); // number | string | {id,value} | array | null
          if (typeof v === "number") return v;
          if (typeof v === "string" && /^\d+$/.test(v)) return parseInt(v,10);
          if (Array.isArray(v) && v.length) {
            var a=v[0];
            if (typeof a==="number") return a;
            if (typeof a==="string" && /^\d+$/.test(a)) return parseInt(a,10);
            if (a && typeof a==="object" && ("id" in a)) return a.id;
          }
          if (v && typeof v==="object" && ("id" in v)) return v.id;
        }
      } catch(e){}
      return null;
    }

    // Initial: hide until a project is chosen
    (function update(){
      var id = readProjectId();
      setId(id || "");
      setVisible(!!id);
    })();

    // React to user selection (some builds fire on blur)
    if (typeof project.onChange === "function") {
      project.onChange(function(){
        var id = readProjectId();
        setId(id || "");
        setVisible(!!id);
        alert("Lookup changed. New ID: " + (id==null? "(none)": id)); // remove after confirming
      });
    } else {
      alert("No onChange exposed; will detect changes for ~15s. After selecting, TAB out of the field.");
      var last=null, ticks=0, t=setInterval(function(){
        var id = readProjectId();
        if (id!==last) {
          last = id;
          setId(id || "");
          setVisible(!!id);
          alert("Detected change via poll. New ID: " + (id==null? "(none)": id)); // remove after confirming
        }
        if (++ticks>60) clearInterval(t);
      },250);
    }
  });
})();

(function(){
  /* ====== CONFIG ====== */
  var PROJECT_LIST_TITLE = "Project Names";   // exact list title
  var SECTION_CLASS = "rest-of-form";         // your container CSS class
  var SECTION_HEADER_TEXT = "Rest of Form";   // fallback by header
  /* ==================== */

  // Labels on the Deliverables form
  var LABELS = {
    lookup: "Project",
    status: "Status",
    projId: "Project ID",
    submittedBy: "Submitted By",
    submittedOn: "Submitted On"
  };

  /* ---------- loud helpers ---------- */
  function badge(msg,color){
    try{
      var b=document.getElementById("__iw_badge__");
      if(!b){ b=document.createElement("div"); b.id="__iw_badge__";
        b.style.cssText="position:fixed;top:6px;right:6px;z-index:2147480000;padding:10px 14px;border-radius:8px;background:"+(color||"#2563eb")+";color:#fff;font:14px system-ui;font-weight:700;box-shadow:0 4px 16px rgba(0,0,0,.35)";
        document.body.appendChild(b);
      }
      b.textContent=msg; b.style.background=color||"#2563eb";
      clearTimeout(b._t); b._t=setTimeout(function(){ if(b && b.parentNode) b.parentNode.removeChild(b); }, 4500);
    }catch(e){}
  }
  function panel(id,title,html){
    try{
      var d=document.getElementById(id);
      if(!d){ d=document.createElement("div"); d.id=id;
        d.style.cssText="position:fixed;bottom:8px;right:8px;z-index:2147480000;max-width:560px;max-height:48vh;overflow:auto;background:#111;color:#fff;font:12px system-ui;border-radius:8px;padding:10px 12px;box-shadow:0 4px 16px rgba(0,0,0,.35)";
        document.body.appendChild(d);
      }
      d.innerHTML="<div style='font-weight:600;margin-bottom:6px'>"+title+"</div>"+html;
    }catch(_){}
  }

  /* ---------- DOM utils ---------- */
  function norm(t){ return String(t||"").replace(/\s+/g," ").replace(/\s*\*+$/,"").trim(); }
  function q(sel,root){ return (root||document).querySelector(sel); }
  function qa(sel,root){ return Array.prototype.slice.call((root||document).querySelectorAll(sel)); }
  function findLabelNode(txt){
    var want=norm(txt).toLowerCase(), nodes=qa("label,.ms-Label,.infowise-label,th,[data-field-label]");
    for (var i=0;i<nodes.length;i++){ var t=norm(nodes[i].innerText||"").toLowerCase(); if (t===want) return nodes[i]; }
    return null;
  }
  function findEditorNearLabel(labelNode){
    if (!labelNode) return null;
    var forId=labelNode.getAttribute("for");
    if (forId){ var el=document.getElementById(forId); if (el && /INPUT|SELECT|TEXTAREA/.test(el.tagName)) return el; }
    var row=labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div")||labelNode.parentElement;
    if (row){ var el2=q("input, select, textarea, [role='combobox'], [contenteditable='true']", row); if (el2) return el2; }
    var sib=labelNode.nextElementSibling;
    while (sib){ var el3=sib.querySelector && sib.querySelector("input, select, textarea, [role='combobox'], [contenteditable='true']"); if (el3) return el3; sib=sib.nextElementSibling; }
    return null;
  }
  function findDisplayValueNode(labelNode){
    if (!labelNode) return null;
    var row=labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div")||labelNode.parentElement;
    var cands=[".iw-control-value",".field-value",".ms-TextField-field",".ms-TextField-wrapper",".value","span","div"];
    for (var i=0;i<cands.length;i++){
      var n=q(cands[i],row); if(!n||n===labelNode) continue;
      if (n.querySelector && n.querySelector("label,.ms-Label,.infowise-label")) continue;
      return n;
    }
    return null;
  }
  function findSectionElement(){
    var el=q("."+SECTION_CLASS); if (el) return el;
    var heads=qa('[role="heading"], h1, h2, h3, h4');
    for (var i=0;i<heads.length;i++){
      if (norm(heads[i].innerText||"").toLowerCase()===SECTION_HEADER_TEXT.toLowerCase())
        return heads[i].closest("section, .ms-Grid-row, .iw-container, .ms-Stack, div")||heads[i].parentElement;
    }
    return null;
  }

  function setControlValue(inputEl, displayEl, val){
    var text=(val==null?"":String(val));
    if (inputEl){
      if (inputEl.tagName==="SELECT"){
        var opt=qa("option",inputEl).find(function(o){return o.value==text;});
        if(!opt && text){ opt=document.createElement("option"); opt.value=text; opt.text=text; inputEl.appendChild(opt); }
        inputEl.value=text;
      } else { inputEl.value=text; }
      var e1=document.createEvent("HTMLEvents"); e1.initEvent("input", true, false);  inputEl.dispatchEvent(e1);
      var e2=document.createEvent("HTMLEvents"); e2.initEvent("change",true, false);  inputEl.dispatchEvent(e2);
    } else if (displayEl){
      displayEl.textContent=text; displayEl.style.minHeight="1.2em";
    }
  }
  function lock(el){
    if(!el) return;
    if(/INPUT|TEXTAREA/.test(el.tagName)){
      el.readOnly=true; el.setAttribute("aria-readonly","true");
      el.style.background="#f5f5f5"; el.style.pointerEvents="none";
    } else if (el.tagName==="SELECT" || el.getAttribute("role")==="combobox"){
      el.setAttribute("data-locked","1"); el.setAttribute("aria-disabled","true");
      el.addEventListener("mousedown",function(e){ if(el.getAttribute("data-locked")==="1") e.preventDefault(); },true);
      el.style.background="#f5f5f5"; el.style.pointerEvents="none";
    } else if (el.hasAttribute("contenteditable")){
      el.setAttribute("contenteditable","false"); el.style.pointerEvents="none"; el.style.background="#f5f5f5";
    }
  }
  function hide(el){ if (el) el.style.display="none"; }
  function show(el){ if (el) el.style.display=""; }

  // lookup reader (tokenized or select)
  function getLookupText(lookupEl){
    if (!lookupEl) return "";
    if (lookupEl.tagName==="SELECT"){
      var i=lookupEl.selectedIndex; return i>=0 ? (lookupEl.options[i].text||"").trim() : "";
    }
    var row=lookupEl.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, div")||lookupEl.parentElement;
    var tkn=row&&(q("[data-value]",row)||q(".ms-BasePicker-text,.selected,.tagItemText,.pickerText",row));
    if (tkn && tkn.textContent) return tkn.textContent.trim();
    return (lookupEl.value||"").trim();
  }

  /* ---------- REST: try multiple base webs ---------- */
  function candidateBases(){
    var origin=location.origin;
    var parts=location.pathname.split("/").filter(Boolean);
    var idx = parts.findIndex(function(p){ p=p.toLowerCase(); return p==="sites" || p==="teams"; });
    var start = (idx>=0 ? idx : 0);
    var stops = {"lists":1,"forms":1,"sitepages":1,"pages":1,"_layouts":1,"catalogs":1};
    var bases=[origin]; // root web first
    // build from deepest to shallow, skipping non-web folders
    for (var end=parts.length; end>start+1; end--){
      var last = parts[end-1].toLowerCase();
      if (stops[last]) continue;
      var base = origin + "/" + parts.slice(0,end).join("/");
      if (bases.indexOf(base)<0) bases.push(base);
    }
    // also include one-level site roots like /sites/XYZ and /teams/XYZ
    if (idx>=0 && parts.length>idx+1){
      var siteRoot = origin + "/" + parts.slice(0, idx+2).join("/");
      if (bases.indexOf(siteRoot)<0) bases.push(siteRoot);
    }
    return bases;
  }

  function fetchAcrossBases(path, cb){
    var tried=[];
    (function next(i){
      var bases=candidateBases();
      if (i>=bases.length) return cb({error:"all_failed", tried:tried});
      var url=bases[i] + path;
      fetch(url, { headers:{ "Accept":"application/json;odata=nometadata" } })
        .then(function(r){
          if(!r.ok){ tried.push({url:url,status:r.status}); return next(i+1); }
          return r.json().then(function(j){ cb(null,{json:j, base:bases[i], tried:tried}); });
        })
        .catch(function(e){ tried.push({url:url,status:"network"}); next(i+1); });
    })(0);
  }

  function safeTitleFilter(t){ return String(t||"").replace(/'/g,"''"); }

  function fetchProjectByExactTitle(title, cb){
    var path = "/_api/web/lists/getbytitle('"+encodeURIComponent(PROJECT_LIST_TITLE)+"')/items?$select=*&$filter=Title eq '"+safeTitleFilter(title)+"'&$top=1";
    fetchAcrossBases(path, cb);
  }
  function fetchProjectByLooseMatch(title, cb){
    // Pull a page and match client-side (handles different casing / alternate name fields)
    var path = "/_api/web/lists/getbytitle('"+encodeURIComponent(PROJECT_LIST_TITLE)+"')/items?$select=ID,Title,Status,ProjectId,Project_x0020_Id,Project_x0020_Name&$top=200";
    fetchAcrossBases(path, function(err,res){
      if (err) return cb(err);
      var j=res.json, lower=String(title||"").toLowerCase();
      var cand = (j.value||[]).find(function(r){
        return (r.Title && String(r.Title).toLowerCase()===lower) ||
               (r.Project_x0020_Name && String(r.Project_x0020_Name).toLowerCase()===lower);
      }) || (j.value||[]).find(function(r){
        return (r.Title && String(r.Title).toLowerCase().indexOf(lower)>=0) ||
               (r.Project_x0020_Name && String(r.Project_x0020_Name).toLowerCase().indexOf(lower)>=0);
      });
      cb(null, {json:cand||null, base:res.base, tried:res.tried});
    });
  }

  // key picking (handles encoded spaces)
  function encSpaces(s){return s?s.replace(/ /g,"_x0020_"):s;}
  function canon(s){return String(s||"").toLowerCase().replace(/_x00[0-9a-f]{2}_/g," ").replace(/[^a-z0-9]/g,"");}
  function pickKey(obj, prefs, must){
    if(!obj) return null;
    var keys=Object.keys(obj), i,k,enc,want=canon(must||prefs[0]||"");
    for(i=0;i<prefs.length;i++){k=prefs[i];enc=encSpaces(k);if(obj.hasOwnProperty(k))return k;if(enc&&obj.hasOwnProperty(enc))return enc;}
    for(i=0;i<keys.length;i++){ if(canon(keys[i])===want) return keys[i]; }
    for(i=0;i<keys.length;i++){ if(want && canon(keys[i]).indexOf(want)>=0) return keys[i]; }
    return null;
  }

  /* ---------- resolve fields ---------- */
  var lookupNode = findLabelNode(LABELS.lookup);
  var statusNode = findLabelNode(LABELS.status);
  var idNode     = findLabelNode(LABELS.projId);
  var subByNode  = findLabelNode(LABELS.submittedBy);
  var subOnNode  = findLabelNode(LABELS.submittedOn);

  var lookupEl   = findEditorNearLabel(lookupNode);
  var statusIn   = findEditorNearLabel(statusNode), statusDisp = statusIn?null:findDisplayValueNode(statusNode);
  var projIdIn   = findEditorNearLabel(idNode),     projIdDisp = projIdIn?null:findDisplayValueNode(idNode);
  var subByIn    = findEditorNearLabel(subByNode),  subByDisp  = subByIn?null:findDisplayValueNode(subByNode);
  var subOnIn    = findEditorNearLabel(subOnNode),  subOnDisp  = subOnIn?null:findDisplayValueNode(subOnNode);
  var sectionEl  = findSectionElement();

  if (!lookupEl || !sectionEl){ badge("Lookup or Section not found","#e11d48"); return; }
  [statusIn, projIdIn, subByIn, subOnIn].forEach(lock);

  function applyRecord(rec){
    if (!rec){ setControlValue(statusIn,statusDisp,""); setControlValue(projIdIn,projIdDisp,""); return; }
    var statusKey = pickKey(rec, ["Status","Project Status","ProjectStatus"], "status");
    var idKey     = pickKey(rec, ["ProjectId","Project ID","Project Id","Project_x0020_Id","ProjectID","PID","ProjectNumber","ID"], "projectid");
    var statusVal = statusKey ? rec[statusKey] : "";
    var bizIdVal  = idKey ? rec[idKey] : null;
    if (bizIdVal==null && rec.ID!=null) bizIdVal = rec.ID;
    setControlValue(statusIn, statusDisp, statusVal || "");
    setControlValue(projIdIn,  projIdDisp,  bizIdVal!=null ? bizIdVal : "");
    panel("__fetch_dbg__","Fetch result",
      "<div><b>statusKey</b>: "+(statusKey||"(none)")+"</div>"+
      "<div><b>idKey</b>: "+(idKey||"(none)")+"</div>"
    );
    setTimeout(function(){ var d=document.getElementById("__fetch_dbg__"); if(d) d.remove(); }, 6000);
  }

  // show/hide + fetch on selection
  var lastText="";
  function update(){
    var text = getLookupText(lookupEl);
    panel("__sel_dbg__","Selection", "<div><b>text</b>: "+(text||"(empty)")+"</div>");

    if (text && text.length) show(sectionEl); else { hide(sectionEl); applyRecord(null); return; }
    if (text === lastText) return; lastText = text;

    // try exact Title first, then loose search; try bases until one works
    var pathInfo = "list “"+PROJECT_LIST_TITLE+"”";
    badge("Fetching by Title: "+text+" …","#2563eb");
    fetchProjectByExactTitle(text, function(err,res){
      if (!err && res && res.json && res.json.value && res.json.value[0]){
        applyRecord(res.json.value[0]); return;
      }
      // exact not found or base failed — try loose
      badge("Exact not found; trying broader …","#f59e0b");
      fetchProjectByLooseMatch(text, function(err2,res2){
        if (!err2 && res2 && res2.json){
          applyRecord(res2.json); return;
        }
        // Show where we tried so you can tell me which URL is correct
        var lines = (res2 && res2.tried ? res2.tried : (res && res.tried ? res.tried : [])).map(function(t){
          return "<div>"+t.status+" → "+t.url+"</div>";
        }).join("") || "<div>(no attempts recorded)</div>";
        panel("__bases_dbg__","Bases tried (status → URL)", lines);
        badge("Fallback search failed", "#e11d48");
      });
    });
  }

  // wire up listeners + observer
  update();
  ["change","input","keyup"].forEach(function(ev){ lookupEl.addEventListener(ev, update, true); });
  lookupEl.addEventListener("blur", function(){ setTimeout(update,0); }, true);
  var row = lookupEl.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, div") || lookupEl.parentElement;
  if (row && window.MutationObserver){
    new MutationObserver(function(){ update(); }).observe(row, {subtree:true, childList:true, attributes:true, characterData:true});
  }
  var ticks=0, t=setInterval(function(){ update(); if(++ticks>30) clearInterval(t); }, 500);
})();

(function() {
    'use strict';

    // --- CONFIGURATION ---
    const SELECTORS = {
        project: '#ComboBox21-input',
        status: '#TextField40',
        saveButton: "button[value='Save']",
        addNewButton: "button[value='Save and New']"
    };
    
    const BLOCKED_STATUSES = ["draft", "inactive"];
    // --- END CONFIGURATION ---

    // Find the elements on the page once.
    const projectDropdown = document.querySelector(SELECTORS.project);
    const statusField = document.querySelector(SELECTORS.status);
    const saveButton = document.querySelector(SELECTORS.saveButton);
    const addNewButton = document.querySelector(SELECTORS.addNewButton);

    // If we can't find the crucial elements, stop the script to prevent errors.
    if (!projectDropdown || (!saveButton && !addNewButton)) {
        console.error("IW Gating Script: Could not find the Project dropdown or the Save buttons. Please verify your CSS selectors in the CONFIGURATION section.");
        return;
    }

    /**
     * Toggles the enabled/disabled state of a button.
     * @param {HTMLElement} button The button element to modify.
     * @param {boolean} enabled True to enable, false to disable.
     */
    const setButtonState = (button, enabled) => {
        if (!button) return; // Ignore if this button doesn't exist on the form.
        
        button.disabled = !enabled;
        button.style.opacity = enabled ? '1' : '0.45';
        button.style.cursor = enabled ? 'pointer' : 'not-allowed';
    };

    /**
     * Checks the project and status fields and updates the button states accordingly.
     */
    const updateButtonState = () => {
        const projectValue = projectDropdown.value;
        
        // The status can be in an input, a select, or just a text span.
        // This handles getting the value from any of them.
        const statusValue = (statusField ? (statusField.value || statusField.textContent) : "").trim().toLowerCase();

        // --- LOGIC ---
        // 1. A project must be selected (value is not empty or '0', a common placeholder).
        const isProjectSelected = projectValue && projectValue !== '0';
        
        // 2. The project's status must NOT be in the blocked list.
        const isStatusOk = !BLOCKED_STATUSES.includes(statusValue);
        
        // Both conditions must be true to enable the buttons.
        const shouldBeEnabled = isProjectSelected && isStatusOk;

        // Apply the final state to both buttons.
        setButtonState(saveButton, shouldBeEnabled);
        setButtonState(addNewButton, shouldBeEnabled);
    };

    // --- INITIALIZATION ---
    // Add the event listener to the project dropdown.
    projectDropdown.addEventListener('change', updateButtonState);

    // Infowise might populate the Status field after you select a Project.
    // We need to watch for that change.
    if (statusField) {
        // Find a stable parent container for the status field to observe.
        const statusContainer = statusField.closest('div.ms-Grid-col, td');
        if (statusContainer) {
            const observer = new MutationObserver(updateButtonState);
            // Watch for changes to the text or children within the status field's container.
            observer.observe(statusContainer, { childList: true, subtree: true, characterData: true });
        }
    }
    
    // Run the check once on page load to set the initial disabled state.
    // A small delay ensures all form elements are ready.
    setTimeout(updateButtonState, 500);

})();

Step 1 — Customize the list form with Power Apps (once per list)

From Initiation.aspx you can jump into each list:

Open the Issues list (right-click “See all” from its web part, or go to the list directly).

Integrate ▸ Power Apps ▸ Customize forms. Power Apps opens with your form.

In the left tree, select the Project data card (your Project lookup). Click Unlock if it’s locked.

Click the ComboBox inside that card (usually named like DataCardValue_Project).

Now set these properties:

DefaultSelectedItems:

If(
    !IsBlank( Param("pid") ),
    [ LookUp( 'Project Names', ID = Value( Param("pid") ) ) ],
    Parent.Default
)


Brackets [...] make a single-item table, which ComboBox expects.
If your Project lookup targets a list named differently, swap 'Project Names'.

(Sanity) Items of the ComboBox should already be like:

Choices( Issues.Project )    // or Choices([@Issues].Project)


Update of the Project data card (select the card, not the ComboBox):

DataCardValue_Project.Selected


(This ensures the selected record is written back.)

Optional polish (keeps the card required):

Data card’s Required = true

ComboBox IsSearchable = true

Save (File ▸ Save) and Publish to SharePoint (Home ▸ Publish).

Repeat Step 1 for each other list (Risks, Decisions, etc.).

If your “Project” is not a Lookup but a single-line text column, use a pname param instead and set:

Default = If( !IsBlank(Param("pname")), Param("pname"), Parent.Default )


(And change the links in Step 3 to pass pname= rather than pid=. Lookup/ID is strongly preferred.)

Step 2 — Hide the built-in command bar on the page (so users use our links)

On Initiation.aspx:

Edit the page.

For each list web part (inside your accordions) → Edit web part (sliders icon).

Toggle Show command bar = Off, Show “See all” = Off.

Publish.

This removes the default Add new item that can’t pass a param.

Step 3 — Add “Add new” links that pass the current Project ID

Because the standard Link/Button web parts can’t pull the selected Project dynamically, the clean, reliable pattern is to place the “Add new …” on the selector (i.e., on each Project row). That way each link can inject that row’s [$ID] into the URL.

A) Add the links to your selector view (Projects list)

Go to Project Names ▸ open your SelectorView (the one feeding the top web part).

Format current view ▸ Advanced mode.

In your existing JSON’s rowFormatter.children, add a link like this for each list you want to create items in:

{
  "elmType": "a",
  "attributes": {
    "href": "=concat('https://YOURTENANT.sharepoint.com/sites/YOURSITE/Lists/Issues/NewForm.aspx?pid=', [$ID], '&Source=https%3A%2F%2FYOURTENANT.sharepoint.com%2Fsites%2FYOURSITE%2FSitePages%2FInitiation.aspx')",
    "target": "_self",
    "title": "Add new Issue for this project"
  },
  "style": { "margin-left": "10px", "font-size": "12px", "text-decoration": "underline" },
  "txtContent": "➕ New Issue"
}


Duplicate that block for Risks, Decisions, etc., swapping Lists/Issues and the link text accordingly.

Keep your existing "customRowAction": {"action":"setSelection"} so a left-click on the row still selects/filters the page.

The Source= param is a URL-encoded link back to Initiation.aspx. Replace YOURTENANT/YOURSITE with your real values (encoded above already). If your page path differs, encode it (every / becomes %2F, : becomes %3A).

Save the JSON.

B) (Optional) Also place a simple hint above the selector

Add a small Text web part above the selector:
“Click a project to filter. Use the ➕ links to add pre-filled items.”

How it behaves

User clicks a project row → all accordions filter immediately (as you have now).

In that same row, user clicks ➕ New Issue → opens the Issues New form, with Project preselected (Power Apps reads ?pid=).

After Save, SharePoint returns to Initiation.aspx (via Source=).

Tip: If you want to keep the selection in place while adding, tell users to Ctrl/Cmd-click the ➕ link to open in a new tab.

Sanity checklist (if you hit snags)

In Power Apps, the Project ComboBox really has:

DefaultSelectedItems = [ LookUp('Project Names', ID = Value(Param("pid")) ) ]

Data card **Update = DataCardValue_Project.Selected`

You published the form back to SharePoint for each list.

Your selector links point to the list’s NewForm.aspx (not Disp/Edit) and include the correct ListName.

Your selector href uses the Projects row’s [$ID] (that’s the lookup target).

Command bars are off on the list web parts to avoid the non-prefilled New panel.

If you tell me one list’s real URL (redact tenant/site if you want) and confirm your Projects list title + Project column is a Lookup, I’ll hand you the exact href line(s) ready to paste and the Power Fx with your actual names.

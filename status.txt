(function () {
  /* ====== CONFIG ====== */
  var PROJECT_LIST_TITLE = "Project Names";  // exact list title
  var SECTION_CLASS = "rest-of-form";        // your container CSS class
  var SECTION_HEADER_TEXT = "Rest of Form";  // fallback by header text
  var DEBUG = false;                         // set true to see fetch/key details

  // form labels (exact, trailing "*" okay)
  var LABELS = {
    lookup: "Project",
    status: "Status",
    projId: "Project ID",
    submittedBy: "Submitted By",
    submittedOn: "Submitted On"
  };

  // If your Projects list lives in a different web than the form,
  // set this to that webâ€™s absolute URL. Otherwise we auto-fallback.
  var PROJECT_LIST_WEB_URL = null; // e.g., "https://tenant.sharepoint.com/sites/Projects"
  /* ===================== */

  /* ---------- small helpers ---------- */
  function norm(t){ return String(t||"").replace(/\s+/g," ").replace(/\s*\*+$/,"").trim(); }
  function q(sel,root){ return (root||document).querySelector(sel); }
  function qa(sel,root){ return Array.prototype.slice.call((root||document).querySelectorAll(sel)); }
  function badge(msg,color){
    try{
      var b=document.getElementById("__iw_badge__");
      if(!b){ b=document.createElement("div"); b.id="__iw_badge__";
        b.style.cssText="position:fixed;top:8px;right:8px;z-index:999999;padding:8px 10px;border-radius:6px;font:12px system-ui;"+
                        "background:"+(color||"#2d7")+";color:#fff;box-shadow:0 2px 8px rgba(0,0,0,.2)";
        document.body.appendChild(b);
      }
      b.textContent=msg; b.style.background=color||"#2d7";
      clearTimeout(b._t); b._t=setTimeout(function(){ b.remove(); }, 3200);
    }catch(e){}
  }
  function panelOnce(html){
    if (!DEBUG) return;
    try{
      var d=document.getElementById("__iw_debug__");
      if(d) d.remove();
      d=document.createElement("div"); d.id="__iw_debug__";
      d.style.cssText="position:fixed;bottom:10px;right:10px;max-width:520px;max-height:50vh;overflow:auto;background:#111;color:#fff;padding:10px;border-radius:8px;z-index:999999;font:12px system-ui;box-shadow:0 4px 16px rgba(0,0,0,.35)";
      d.innerHTML=html; document.body.appendChild(d);
      setTimeout(function(){ d.remove(); }, 7000);
    }catch(_){}
  }

  function findLabelNode(exact){
    var want = norm(exact).toLowerCase();
    var nodes = qa("label,.ms-Label,.infowise-label,th,[data-field-label]");
    for (var i=0;i<nodes.length;i++){
      var t = norm(nodes[i].innerText||"").toLowerCase();
      if (t === want) return nodes[i];
    }
    return null;
  }
  function findEditorNearLabel(labelNode){
    if (!labelNode) return null;
    var forId = labelNode.getAttribute("for");
    if (forId){
      var el = document.getElementById(forId);
      if (el && /INPUT|SELECT|TEXTAREA/.test(el.tagName)) return el;
    }
    var row = labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div") || labelNode.parentElement;
    if (row){
      var el2 = q("input, select, textarea, [role='combobox'], [contenteditable='true']", row);
      if (el2) return el2;
    }
    var sib = labelNode.nextElementSibling;
    while (sib){
      var el3 = sib.querySelector && sib.querySelector("input, select, textarea, [role='combobox'], [contenteditable='true']");
      if (el3) return el3;
      sib = sib.nextElementSibling;
    }
    return null;
  }
  function findDisplayValueNode(labelNode){
    if (!labelNode) return null;
    var row = labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div") || labelNode.parentElement;
    var cands = [".iw-control-value",".field-value",".ms-TextField-field",".ms-TextField-wrapper",".value","span","div"];
    for (var i=0;i<cands.length;i++){
      var n = q(cands[i], row);
      if (!n || n===labelNode) continue;
      if (n.querySelector && n.querySelector("label,.ms-Label,.infowise-label")) continue;
      return n;
    }
    return null;
  }
  function findSectionElement(){
    var el = q("."+SECTION_CLASS); if (el) return el;
    var heads = qa('[role="heading"], h1, h2, h3, h4');
    for (var i=0;i<heads.length;i++){
      if (norm(heads[i].innerText||"").toLowerCase() === SECTION_HEADER_TEXT.toLowerCase()){
        return heads[i].closest("section, .ms-Grid-row, .iw-container, .ms-Stack, div") || heads[i].parentElement;
      }
    }
    return null;
  }
  function setControlValue(inputEl, displayEl, val){
    var text = (val==null ? "" : String(val));
    if (inputEl){
      if (inputEl.tagName === "SELECT"){
        var opt = qa("option", inputEl).find(function(o){ return o.value==text; });
        if (!opt && text){ opt=document.createElement("option"); opt.value=text; opt.text=text; inputEl.appendChild(opt); }
        inputEl.value = text;
      } else { inputEl.value = text; }
      var e1=document.createEvent("HTMLEvents"); e1.initEvent("input", true, false);  inputEl.dispatchEvent(e1);
      var e2=document.createEvent("HTMLEvents"); e2.initEvent("change",true, false);  inputEl.dispatchEvent(e2);
    } else if (displayEl){
      displayEl.textContent = text;
      displayEl.style.minHeight = "1.2em";
    }
  }
  function lockReadOnly(el){
    if (!el) return;
    if (/INPUT|TEXTAREA/.test(el.tagName)){
      el.readOnly = true; el.setAttribute("aria-readonly","true");
      el.style.background = "#f5f5f5"; el.style.pointerEvents = "none";
    } else if (el.tagName === "SELECT" || el.getAttribute("role")==="combobox"){
      el.setAttribute("data-locked","1"); el.setAttribute("aria-disabled","true");
      el.addEventListener("mousedown", function(e){ if (el.getAttribute("data-locked")==="1") e.preventDefault(); }, true);
      el.style.background = "#f5f5f5"; el.style.pointerEvents = "none";
    } else if (el.hasAttribute("contenteditable")){
      el.setAttribute("contenteditable","false"); el.style.pointerEvents="none"; el.style.background="#f5f5f5";
    }
  }
  function hide(el){ if (el) el.style.display="none"; }
  function show(el){ if (el) el.style.display=""; }

  // lookup readers
  function getLookupText(lookupEl){
    if (!lookupEl) return "";
    if (lookupEl.tagName === "SELECT"){
      var i = lookupEl.selectedIndex; return i>=0 ? (lookupEl.options[i].text||"").trim() : "";
    }
    var row = lookupEl.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, div") || lookupEl.parentElement;
    var tkn = row && (q("[data-value]", row) || q(".ms-BasePicker-text,.selected,.tagItemText,.pickerText", row));
    if (tkn && tkn.textContent) return tkn.textContent.trim();
    return (lookupEl.value||"").trim();
  }
  function getLookupId(lookupEl){
    if (!lookupEl) return null;
    if (lookupEl.tagName === "SELECT"){
      var v = lookupEl.value; return v && /^\d+$/.test(v) ? parseInt(v,10) : (v||null);
    }
    var dataId = lookupEl.getAttribute("data-id") || lookupEl.getAttribute("data-itemid") || lookupEl.getAttribute("data-entityid");
    if (dataId){ return /^\d+$/.test(dataId) ? parseInt(dataId,10) : dataId; }
    if (lookupEl.value && /^\d+$/.test(lookupEl.value)) return parseInt(lookupEl.value,10);
    var row = lookupEl.closest(".ms-Grid-row, .row, .iw-control, .ms-Stack, div") || lookupEl.parentElement;
    if (row){
      var hids = qa('input[type="hidden"]', row);
      for (var i=0;i<hids.length;i++){
        var nm=(hids[i].name||"")+" "+(hids[i].id||"");
        var val=hids[i].value||""; if(!val) continue;
        if (/\b(Id|ID|_Id|Lookup|EntityId|ItemId)\b/.test(nm)) return /^\d+$/.test(val)?parseInt(val,10):val;
      }
    }
    return null;
  }

  /* ---------- REST with cross-web fallback ---------- */
  function baseUrls(){
    var urls = [];
    if (PROJECT_LIST_WEB_URL) urls.push(PROJECT_LIST_WEB_URL);
    urls.push(_spPageContextInfo.webAbsoluteUrl);
    if (_spPageContextInfo.siteAbsoluteUrl && _spPageContextInfo.siteAbsoluteUrl !== _spPageContextInfo.webAbsoluteUrl){
      urls.push(_spPageContextInfo.siteAbsoluteUrl);
    }
    // de-dupe
    var out=[], seen={}; for (var i=0;i<urls.length;i++){ if(!seen[urls[i]]){ seen[urls[i]]=1; out.push(urls[i]); } }
    return out;
  }
  function fetchJsonWithFallback(path, cb){
    var bases = baseUrls(), idx=0;
    (function tryNext(){
      if (idx>=bases.length) return cb(null, {status:0, tried:bases});
      var url = bases[idx] + path;
      fetch(url, { headers: { "Accept":"application/json;odata=nometadata" } })
        .then(function(r){
          if (!r.ok){ idx++; return tryNext(); }
          return r.json().then(function(j){ cb({json:j, used:bases[idx]}, {status:200, tried:bases}); });
        })
        .catch(function(){ idx++; tryNext(); });
    })();
  }
  function fetchProjectById(id, cb){
    fetchJsonWithFallback("/_api/web/lists/getbytitle('"+encodeURIComponent(PROJECT_LIST_TITLE)+"')/items("+id+")?$select=*",
      function(res, meta){ cb(res, meta); });
  }
  function fetchProjectByTitle(title, cb){
    var flt = "$filter=Title eq '"+ String(title).replace(/'/g,"''") +"'&$top=1";
    fetchJsonWithFallback("/_api/web/lists/getbytitle('"+encodeURIComponent(PROJECT_LIST_TITLE)+"')/items?$select=*&"+flt,
      function(res, meta){ cb(res, meta); });
  }

  // choose keys: prefer exact, then encoded, then fuzzy
  function encSpaces(s){ return s ? s.replace(/ /g, "_x0020_") : s; }
  function canon(s){ return String(s||"").toLowerCase().replace(/_x00[0-9a-f]{2}_/g," ").replace(/[^a-z0-9]/g,""); }
  function pickKey(rec, preferredList, mustContain){
    if(!rec) return null;
    var keys = Object.keys(rec), i,k,enc;
    for(i=0;i<preferredList.length;i++){ k=preferredList[i]; enc=encSpaces(k);
      if (rec.hasOwnProperty(k)) return k;
      if (enc && rec.hasOwnProperty(enc)) return enc;
    }
    var want=canon(mustContain||preferredList[0]||"");
    for(i=0;i<keys.length;i++){ if(canon(keys[i])===want) return keys[i]; }
    for(i=0;i<keys.length;i++){ if(want && canon(keys[i]).indexOf(want)>=0) return keys[i]; }
    return null;
  }

  /* ---------- wire up ---------- */
  badge("Open: populate + lock");

  var lookupNode = findLabelNode(LABELS.lookup);
  var statusNode = findLabelNode(LABELS.status);
  var idNode     = findLabelNode(LABELS.projId);
  var subByNode  = findLabelNode(LABELS.submittedBy);
  var subOnNode  = findLabelNode(LABELS.submittedOn);

  var lookupEl   = findEditorNearLabel(lookupNode);
  var statusIn   = findEditorNearLabel(statusNode), statusDisp = statusIn?null:findDisplayValueNode(statusNode);
  var projIdIn   = findEditorNearLabel(idNode),     projIdDisp = projIdIn?null:findDisplayValueNode(idNode);
  var subByIn    = findEditorNearLabel(subByNode),  subByDisp  = subByIn?null:findDisplayValueNode(subByNode);
  var subOnIn    = findEditorNearLabel(subOnNode),  subOnDisp  = subOnIn?null:findDisplayValueNode(subOnNode);
  var sectionEl  = findSectionElement();

  if (!lookupEl || !sectionEl) return;

  // lock the four fields read-only (if inputs exist)
  [statusIn, projIdIn, subByIn, subOnIn].forEach(lockReadOnly);

  function applyRecord(rec){
    if (!rec){
      setControlValue(statusIn, statusDisp, "");
      setControlValue(projIdIn,  projIdDisp,  "");
      return;
    }
    // prefer exact names; include encoded and common aliases
    var statusKey = pickKey(rec, ["Status","Project Status","ProjectStatus"], "status");
    var idKey     = pickKey(rec, ["ProjectId","Project ID","Project Id","Project_x0020_Id","ProjectID","PID","ProjectNumber","ID"], "projectid");

    if (DEBUG){
      panelOnce(
        "<b>Fetch OK</b><br>"+
        "Picked status key: <code>"+(statusKey||"(none)")+"</code><br>"+
        "Picked id key: <code>"+(idKey||"(none)")+"</code><br>"+
        "<div style='margin-top:6px;opacity:.8'>Keys seen: "+Object.keys(rec).slice(0,30).join(", ")+"</div>"
      );
    }

    var statusVal = statusKey ? rec[statusKey] : "";
    var bizIdVal  = idKey ? rec[idKey] : null;
    if (bizIdVal == null && rec.ID != null) bizIdVal = rec.ID;

    setControlValue(statusIn, statusDisp, statusVal || "");
    setControlValue(projIdIn,  projIdDisp,  bizIdVal != null ? bizIdVal : "");
  }

  function update(){
    var id   = getLookupId(lookupEl);
    var text = getLookupText(lookupEl);

    if (id!=null || (text && text.length)) show(sectionEl); else { hide(sectionEl); applyRecord(null); return; }

    var onResult = function(res, meta){
      if (!res || !res.json){
        if (DEBUG) panelOnce("<b>Fetch failed</b><br>Status: "+(meta&&meta.status)+"<br>Tried: "+(meta&&meta.tried?meta.tried.join(" â†’ "):"") );
        return;
      }
      var rec = res.json.value ? res.json.value[0] : res.json; // list -> items or single item
      applyRecord(rec || null);
    };

    if (id!=null) fetchProjectById(id, onResult);
    else if (text) fetchProjectByTitle(text, onResult);
  }

  // initial + listeners (some pickers only fire on blur)
  update();
  ["change","input","keyup"].forEach(function(ev){ lookupEl.addEventListener(ev, update, true); });
  lookupEl.addEventListener("blur", function(){ setTimeout(update, 0); }, true);
  var ticks=0, t=setInterval(function(){ update(); if(++ticks>30) clearInterval(t); }, 500);
})();

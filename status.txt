(function(){
  /* ====== CONFIG ====== */
  var PROJECT_LIST_TITLE = "Project Names";
  var SECTION_CLASS = "rest-of-form";
  var SECTION_HEADER_TEXT = "Rest of Form"; 
  /* ==================== */

  // Form labels (exact; trailing "*" is okay)
  var LABELS = {
    lookup: "Project",
    deliverable: "Deliverable",
    status: "Status",
    projId: "Project ID",
    submittedBy: "Submitted By",
    submittedOn: "Submitted On",
    deliverableNo: "Deliverable Number",
    completed: "Completed"
  };
  
  // NEW: Variable to reliably hold the last selected project name
  var currentProjectText = "";

  // ---------- DOM helpers ----------
  function norm(t){ return String(t||"").replace(/\s+/g," ").replace(/\s*\*+$/,"").trim(); }
  function q(sel,root){ return (root||document).querySelector(sel); }
  function qa(sel,root){ return Array.prototype.slice.call((root||document).querySelectorAll(sel)); }

  function findLabelNode(txt){
    var want=norm(txt).toLowerCase(), nodes=qa("label,.ms-Label,.infowise-label,th,[data-field-label]");
    for (var i=0;i<nodes.length;i++){ var t=norm(nodes[i].innerText||"").toLowerCase(); if (t===want) return nodes[i]; }
    return null;
  }
  function findEditorNearLabel(labelNode){
    if (!labelNode) return null;
    var forId=labelNode.getAttribute("for");
    if (forId){ var el=document.getElementById(forId); if (el && /INPUT|SELECT|TEXTAREA/.test(el.tagName)) return el; }
    var row=labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div")||labelNode.parentElement;
    if (row){ var el2=q("input, select, textarea, [role='combobox'], [contenteditable='true']", row); if (el2) return el2; }
    var sib=labelNode.nextElementSibling;
    while (sib){ var el3=sib.querySelector && sib.querySelector("input, select, textarea, [role='combobox'], [contenteditable='true']"); if (el3) return el3; sib=sib.nextElementSibling; }
    return null;
  }
  function findDisplayValueNode(labelNode){
    if (!labelNode) return null;
    var row=labelNode.closest(".iw-control, .ms-Grid-row, .ms-Stack, .ms-Grid, .row, div")||labelNode.parentElement;
    var cands=[".iw-control-value",".field-value",".ms-TextField-field",".ms-TextField-wrapper",".value","span","div"];
    for (var i=0;i<cands.length;i++){
      var n=q(cands[i],row); if(!n||n===labelNode) continue;
      if (n.querySelector && n.querySelector("label,.ms-Label,.infowise-label")) continue;
      return n;
    }
    return null;
  }
  function findSectionElement(){
    var el=q("."+SECTION_CLASS); if (el) return el;
    var heads=qa('[role="heading"], h1, h2, h3, h4');
    for (var i=0;i<heads.length;i++){
      if (norm(heads[i].innerText||"").toLowerCase()===SECTION_HEADER_TEXT.toLowerCase())
        return heads[i].closest("section, .ms-Grid-row, .iw-container, .ms-Stack, div")||heads[i].parentElement;
    }
    return null;
  }

  function setControlValue(inputEl, displayEl, val){
    var text=(val==null?"":String(val));
    if (inputEl){
      if (inputEl.tagName==="SELECT"){
        var opt=qa("option",inputEl).find(function(o){return o.value==text;});
        if(!opt && text){ opt=document.createElement("option"); opt.value=text; opt.text=text; inputEl.appendChild(opt); }
        inputEl.value=text;
      } else if (inputEl.type === "checkbox"){
        inputEl.checked = !!(text===true || text==="true" || text==="1" || String(text).toLowerCase()==="yes");
      } else {
        inputEl.value=text;
      }
      var e1=document.createEvent("HTMLEvents"); e1.initEvent("input", true, false);  inputEl.dispatchEvent(e1);
      var e2=document.createEvent("HTMLEvents"); e2.initEvent("change",true, false);  inputEl.dispatchEvent(e2);
    } else if (displayEl){
      displayEl.textContent=text; displayEl.style.minHeight="1.2em";
    }
  }

  // Lock text/select/contenteditable read-only (submit-safe)
  function lock(el){
    if(!el) return;
    if (el.type === "checkbox" || el.type === "radio") { return; } // handled by lockCheckboxHard
    if(/INPUT|TEXTAREA/.test(el.tagName)){
      el.readOnly=true; el.setAttribute("aria-readonly","true");
      el.style.background="#f5f5f5"; el.style.pointerEvents="none";
    } else if (el.tagName==="SELECT" || el.getAttribute("role")==="combobox"){
      el.setAttribute("data-locked","1"); el.setAttribute("aria-disabled","true");
      el.addEventListener("mousedown",function(e){ if(el.getAttribute("data-locked")==="1") e.preventDefault(); },true);
      el.style.background="#f5f5f5"; el.style.pointerEvents="none";
    } else if (el.hasAttribute("contenteditable")){
      el.setAttribute("contenteditable","false"); el.style.pointerEvents="none"; el.style.background="#f5f5f5";
    }
  }

  // HARD lock for checkbox/toggle: block at row-level & revert changes
  function lockCheckboxHard(labelNode, inputEl){
    if (!inputEl) return;
    var row = (labelNode && (labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div"))) || inputEl.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div") || document.body;
    var fixed = inputEl.checked;

    // Visual hint
    inputEl.style.pointerEvents = "none";
    if (row) { row.style.opacity = "0.95"; }

    // Revert on any attempted change
    inputEl.addEventListener("change", function(e){
      if (inputEl.checked !== fixed){
        inputEl.checked = fixed;
        e.preventDefault(); e.stopImmediatePropagation();
      }
    }, true);

    // Kill interactions on the whole row (captures label/ms-Toggle clicks)
    ["click","mousedown","mouseup","keydown","keyup","touchstart"].forEach(function(ev){
      row.addEventListener(ev, function(e){
        var within = e.target && row.contains(e.target);
        if (!within) return;
        // allow focus/scroll, block activation
        if (/click|mousedown|mouseup|keydown|keyup|touchstart/.test(ev)){
          e.preventDefault(); e.stopImmediatePropagation();
        }
      }, true);
    });

    // For re-renders, keep forcing the value back
    if (window.MutationObserver){
      new MutationObserver(function(){
        if (inputEl.checked !== fixed) inputEl.checked = fixed;
      }).observe(row, {subtree:true, childList:true, attributes:true});
    }
  }

  function hide(el){ if (el) el.style.display="none"; }
  function show(el){ if (el) el.style.display=""; }

  // Lookup: we only need its display text
  function getLookupText(lookupEl){
    if (!lookupEl) return "";
    if (lookupEl.tagName==="SELECT"){
      var i=lookupEl.selectedIndex; return i>=0 ? (lookupEl.options[i].text||"").trim() : "";
    }
    var row=lookupEl.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, div")||lookupEl.parentElement;
    var tkn=row&&(q("[data-value]",row)||q(".ms-BasePicker-text,.selected,.tagItemText,.pickerText",row));
    if (tkn && tkn.textContent) return tkn.textContent.trim();
    return (lookupEl.value||"").trim();
  }
  function setLookupByText(lookupEl, text){
    if (!lookupEl || !text) return false;
    if (lookupEl.tagName==="SELECT"){
      var opts = qa("option", lookupEl);
      for (var i=0;i<opts.length;i++){
        if (norm(opts[i].text).toLowerCase() === norm(text).toLowerCase()){
          lookupEl.selectedIndex = i;
          ["input","change"].forEach(function(ev){ var e=document.createEvent("HTMLEvents"); e.initEvent(ev,true,false); lookupEl.dispatchEvent(e); });
          return true;
        }
      }
      return false;
    } else {
      lookupEl.value = text;
      ["input","change","keyup","blur"].forEach(function(ev){ var e=document.createEvent("HTMLEvents"); e.initEvent(ev,true,false); lookupEl.dispatchEvent(e); });
      return true;
    }
  }

  // ---------- REST across candidate bases ----------
  function candidateBases(){
    var origin=location.origin;
    var parts=location.pathname.split("/").filter(Boolean);
    var idx = parts.findIndex(function(p){ p=p.toLowerCase(); return p==="sites" || p==="teams"; });
    var start = (idx>=0 ? idx : 0);
    var stops = {"lists":1,"forms":1,"sitepages":1,"pages":1,"_layouts":1,"catalogs":1};
    var bases=[origin];
    for (var end=parts.length; end>start+1; end--){
      var last = parts[end-1].toLowerCase();
      if (stops[last]) continue;
      var base = origin + "/" + parts.slice(0,end).join("/");
      if (bases.indexOf(base)<0) bases.push(base);
    }
    if (idx>=0 && parts.length>idx+1){
      var siteRoot = origin + "/" + parts.slice(0, idx+2).join("/");
      if (bases.indexOf(siteRoot)<0) bases.push(siteRoot);
    }
    return bases;
  }
  function fetchAcrossBases(path, cb){
    (function next(i, tried){
      tried = tried || [];
      var bases=candidateBases();
      if (i>=bases.length) return cb({error:"all_failed", tried:tried});
      var url=bases[i] + path;
      fetch(url, { headers:{ "Accept":"application/json;odata=nometadata" } })
        .then(function(r){
          if(!r.ok){ tried.push({url:url,status:r.status}); return next(i+1,tried); }
          return r.json().then(function(j){ cb(null,{json:j, base:bases[i], tried:tried}); });
        })
        .catch(function(){ tried.push({url:url,status:"network"}); next(i+1,tried); });
    })(0, []);
  }
  function safeTitleFilter(t){ return String(t||"").replace(/'/g,"''"); }
  function fetchProjectByExactTitle(title, cb){
    var path = "/_api/web/lists/getbytitle('"+encodeURIComponent(PROJECT_LIST_TITLE)+"')/items?$select=*&$filter=Title eq '"+safeTitleFilter(title)+"'&$top=1";
    fetchAcrossBases(path, cb);
  }
  function fetchProjectByLooseMatch(title, cb){
    var path = "/_api/web/lists/getbytitle('"+encodeURIComponent(PROJECT_LIST_TITLE)+"')/items?$select=ID,Title,Status,ProjectId,Project_x0020_Id,Project_x0020_Name&$top=200";
    fetchAcrossBases(path, function(err,res){
      if (err) return cb(err);
      var j=res.json, lower=String(title||"").toLowerCase();
      var cand = (j.value||[]).find(function(r){
        return (r.Title && String(r.Title).toLowerCase()===lower) ||
               (r.Project_x0020_Name && String(r.Project_x0020_Name).toLowerCase()===lower);
      }) || (j.value||[]).find(function(r){
        return (r.Title && String(r.Title).toLowerCase().indexOf(lower)>=0) ||
               (r.Project_x0020_Name && String(r.Project_x0020_Name).toLowerCase().indexOf(lower)>=0);
      });
      cb(null, {json:cand||null, base:res.base});
    });
  }

  function encSpaces(s){return s?s.replace(/ /g,"_x0020_"):s;}
  function canon(s){return String(s||"").toLowerCase().replace(/_x00[0-9a-f]{2}_/g," ").replace(/[^a-z0-9]/g,"");}
  function pickKey(obj, prefs, must){
    if(!obj) return null;
    var keys=Object.keys(obj), i,k,enc,want=canon(must||prefs[0]||"");
    for(i=0;i<prefs.length;i++){k=prefs[i];enc=encSpaces(k);if(obj.hasOwnProperty(k))return k;if(enc&&obj.hasOwnProperty(enc))return enc;}
    for(i=0;i<keys.length;i++){ if(canon(keys[i])===want) return keys[i]; }
    for(i=0;i<keys.length;i++){ if(want && canon(keys[i]).indexOf(want)>=0) return keys[i]; }
    return null;
  }

  // ---------- Resolve form elements ----------
  var lookupNode = findLabelNode(LABELS.lookup);
  var deliverableNode = findLabelNode(LABELS.deliverable);
  var statusNode = findLabelNode(LABELS.status);
  var idNode     = findLabelNode(LABELS.projId);
  var subByNode  = findLabelNode(LABELS.submittedBy);
  var subOnNode  = findLabelNode(LABELS.submittedOn);
  var delivNoNode = findLabelNode(LABELS.deliverableNo);

  var lookupEl   = findEditorNearLabel(lookupNode);
  var deliverableIn = findEditorNearLabel(deliverableNode);
  var statusIn   = findEditorNearLabel(statusNode), statusDisp = statusIn?null:findDisplayValueNode(statusNode);
  var projIdIn   = findEditorNearLabel(idNode),     projIdDisp = projIdIn?null:findDisplayValueNode(idNode);
  var subByIn    = findEditorNearLabel(subByNode),  subByDisp  = subByIn?null:findDisplayValueNode(subByNode);
  var subOnIn    = findEditorNearLabel(subOnNode),  subOnDisp  = subOnIn?null:findDisplayValueNode(subOnNode);
  var delivNoIn  = findEditorNearLabel(delivNoNode);

  var sectionEl  = findSectionElement();
  if (!lookupEl || !sectionEl) return;

  // Lock requested fields (submit-safe)
  [statusIn, projIdIn, subByIn, subOnIn, delivNoIn].forEach(lock);
  
  // FIX #1: This new section makes the "Completed" lock much more reliable.
  // It repeatedly tries to find and lock the toggle, guarding against form re-rendering.
  function applyCompletedLock() {
      var completedNode = findLabelNode(LABELS.completed);
      var completedIn = completedNode ? findEditorNearLabel(completedNode) : null;
      
      // Only apply the lock if the element exists and hasn't been locked yet
      if (completedIn && !completedIn.hasAttribute('data-iw-hard-locked')) {
          lockCheckboxHard(completedNode, completedIn);
          completedIn.setAttribute('data-iw-hard-locked', 'true');
      }
  }
  applyCompletedLock(); // Try to lock immediately
  var lockInterval = setInterval(applyCompletedLock, 500); // And poll for a few seconds
  setTimeout(function(){ clearInterval(lockInterval); }, 5000);
  if (window.MutationObserver) { // Use an observer for long-term resilience
      new MutationObserver(applyCompletedLock).observe(document.body, { childList: true, subtree: true });
  }

  // Hide visible "Rest of Form" header inside the section
  (function hideSectionHeader(){
    var se = sectionEl;
    if (!se) return;
    qa('[role="heading"], h1, h2, h3, h4', se).forEach(function(h){
      if (!SECTION_HEADER_TEXT || norm(h.innerText||"").toLowerCase()===SECTION_HEADER_TEXT.toLowerCase()){
        h.style.display = "none";
      }
    });
    var hdr = q('.iw-container-header, .ms-Stack > .ms-Text', se);
    if (hdr) hdr.style.display = "none";
  })();

  function applyRecord(rec){
    if (!rec){ setControlValue(statusIn,statusDisp,""); setControlValue(projIdIn,projIdDisp,""); return; }
    var statusKey = pickKey(rec, ["Status","Project Status","ProjectStatus"], "status");
    var idKey     = pickKey(rec, ["ProjectId","Project ID","Project Id","Project_x0020_Id","ProjectID","PID","ProjectNumber","ID"], "projectid");
    var statusVal = statusKey ? rec[statusKey] : "";
    var bizIdVal  = idKey ? rec[idKey] : null;
    if (bizIdVal==null && rec.ID!=null) bizIdVal = rec.ID;
    setControlValue(statusIn, statusDisp, statusVal || "");
    setControlValue(projIdIn,  projIdDisp,  bizIdVal!=null ? bizIdVal : "");
  }

  // ---- Remember Project on Save & New, and clear Deliverable ----
  var STORAGE_KEY = "iw_keep_project";
  function rememberProjectForNext(){
    try {
      // FIX #2: Use the reliably stored project name instead of reading it during the click
      var text = currentProjectText;
      if (!text) return;
      sessionStorage.setItem(STORAGE_KEY, JSON.stringify({text:text, t:Date.now()}));
    } catch(_){}
  }
  function applyRememberedProject(){
    try {
      var raw = sessionStorage.getItem(STORAGE_KEY);
      if (!raw) return;
      var obj = JSON.parse(raw || "{}");
      // expire after ~15 minutes
      if (!obj || !obj.text || (Date.now() - (obj.t||0) > 15*60*1000)) {
        sessionStorage.removeItem(STORAGE_KEY);
        return;
      }
      // Set the lookup and clear Deliverable
      setLookupByText(lookupEl, obj.text);
      if (deliverableIn) setControlValue(deliverableIn, null, "");
      // kick our normal update to refresh Status/ID
      setTimeout(update, 50);
      // one-time apply
      sessionStorage.removeItem(STORAGE_KEY);
    } catch(_){}
  }

  // delegate: catch any “Save & New” / “Add New” clicks before navigation
  document.addEventListener("click", function(e){
    var btn = e.target && e.target.closest && e.target.closest("button, a, [role='button'], .ms-Button");
    if (!btn) return;
    var txt = norm(((btn.innerText||btn.textContent||"")+" "+(btn.getAttribute("aria-label")||"")+" "+(btn.title||""))).toLowerCase();
    if ((/\bsave\b/.test(txt) && /\bnew\b/.test(txt)) || /\badd\b.*\bnew\b/.test(txt)){
      rememberProjectForNext();
    }
  }, true);

  var lastText="";
  function update(){
    var text = getLookupText(lookupEl);
    
    // FIX #2: Always keep the current project name in a variable for later.
    currentProjectText = text;

    // show/hide section
    if (text && text.length) show(sectionEl); else { hide(sectionEl); applyRecord(null); return; }
    if (text === lastText) return;
    lastText = text;

    // fetch by exact Title; fallback to loose match; try multiple bases
    fetchProjectByExactTitle(text, function(err,res){
      if (!err && res && res.json && res.json.value && res.json.value[0]){
        applyRecord(res.json.value[0]); return;
      }
      fetchProjectByLooseMatch(text, function(err2,res2){
        applyRecord(!err2 && res2 ? res2.json : null);
      });
    });
  }

  // wire up listeners / observer / safety poll
  // If we just came here from Save & New, apply stored choice first
  applyRememberedProject();

  update();
  ["change","input","keyup"].forEach(function(ev){ lookupEl.addEventListener(ev, update, true); });
  lookupEl.addEventListener("blur", function(){ setTimeout(update,0); }, true);
  var row = lookupEl.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, div") || lookupEl.parentElement;
  if (row && window.MutationObserver){
    new MutationObserver(function(){ update(); }).observe(row, {subtree:true, childList:true, attributes:true, characterData:true});
  }
  var ticks=0, t=setInterval(function(){ update(); if(++ticks>30) clearInterval(t); }, 500);
})();

(function(){
  // UPDATED: add new labels to hide their .fieldDesc “footer” lines
  var TARGET_LABELS = [
    "Project","Status","Project ID","Submitted By","Submitted On",
    "Deliverable Number","Completed"
  ];

  function norm(t){ return String(t||"").replace(/\s+/g," ").replace(/\s*\*+$/,"").trim(); }
  function q(sel,root){ return (root||document).querySelector(sel); }
  function qa(sel,root){ return Array.prototype.slice.call((root||document).querySelectorAll(sel)); }
  function findLabelNode(txt){
    var want = norm(txt).toLowerCase();
    var nodes = qa("label,.ms-Label,.infowise-label,th,[data-field-label]");
    for (var i=0;i<nodes.length;i++){
      var t = norm(nodes[i].innerText||"").toLowerCase();
      if (t === want) return nodes[i];
    }
    return null;
  }
  function hideDescFor(label){
    var labelNode = findLabelNode(label);
    if (!labelNode) return;
    var row = labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div") || labelNode.parentElement;
    qa(".fieldDesc", row).forEach(function(n){ n.style.display = "none"; });
  }
  TARGET_LABELS.forEach(hideDescFor);

  // guard against re-renders
  var formRoot = document.body;
  if (window.MutationObserver){
    new MutationObserver(function(){ TARGET_LABELS.forEach(hideDescFor); })
      .observe(formRoot, {subtree:true, childList:true});
  }
})();

/* Hide the default command bar (Save/Cancel above the form) */
(function(){
  function hideBars(){
    var sels = [
      ".iw-commandBar",              // InfoWise bar above the form
      ".ms-CommandBar",              // Fluent UI
      "[role='menubar']",
      "[data-automationid='CommandBar']"
    ];
    sels.forEach(function(sel){
      document.querySelectorAll(sel).forEach(function(n){
        // Only hide top bars; skip anything inside our inner form sections
        if (!n.closest(".iw-container, .rest-of-form")) {
          n.style.display = "none";
        }
      });
    });
  }
  hideBars();
  if (window.MutationObserver){
    new MutationObserver(hideBars).observe(document.body, {subtree:true, childList:true});
  }
})();

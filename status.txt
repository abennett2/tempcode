(function(){
  /* Button gate: enable only when Project chosen AND Status not Draft/Inactive */
  var LABELS = { lookup:"Project", status:"Status" };
  var BLOCKED = ["draft","inactive"]; // case-insensitive

  /* --- helpers --- */
  function norm(t){ return String(t||"").replace(/\s+/g," ").replace(/\s*\*+$/,"").trim(); }
  function q(sel,root){ return (root||document).querySelector(sel); }
  function qa(sel,root){ return Array.prototype.slice.call((root||document).querySelectorAll(sel)); }

  function findLabelNode(txt){
    var want = norm(txt).toLowerCase();
    var nodes = qa("label,.ms-Label,.infowise-label,th,[data-field-label]");
    for (var i=0;i<nodes.length;i++){
      var t = norm(nodes[i].innerText||"").toLowerCase();
      if (t === want) return nodes[i];
    }
    return null;
  }
  function findEditorNearLabel(labelNode){
    if (!labelNode) return null;
    var forId = labelNode.getAttribute("for");
    if (forId){ var el=document.getElementById(forId); if (el && /INPUT|SELECT|TEXTAREA/.test(el.tagName)) return el; }
    var row = labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div") || labelNode.parentElement;
    if (row){ var el2 = q("input, select, textarea, [role='combobox'], [contenteditable='true']", row); if (el2) return el2; }
    var sib = labelNode.nextElementSibling;
    while (sib){ var el3 = sib.querySelector && sib.querySelector("input, select, textarea, [role='combobox'], [contenteditable='true']"); if (el3) return el3; sib = sib.nextElementSibling; }
    return null;
  }
  function findDisplayValueNode(labelNode){
    if (!labelNode) return null;
    var row = labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div") || labelNode.parentElement;
    var cands = [".iw-control-value",".field-value",".ms-TextField-field",".ms-TextField-wrapper",".value","span","div"];
    for (var i=0;i<cands.length;i++){
      var n=q(cands[i],row); if(!n||n===labelNode) continue;
      if (n.querySelector && n.querySelector("label,.ms-Label,.infowise-label")) continue;
      return n;
    }
    return null;
  }

  function getLookupText(){
    var ln = findLabelNode(LABELS.lookup); if(!ln) return "";
    var el = findEditorNearLabel(ln); if (!el) return "";
    if (el.tagName==="SELECT"){ var i=el.selectedIndex; return i>=0 ? (el.options[i].text||"").trim() : ""; }
    var row=el.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, div")||el.parentElement;
    var tkn=row&&(q("[data-value]",row)||q(".ms-BasePicker-text,.selected,.tagItemText,.pickerText",row));
    if (tkn && tkn.textContent) return tkn.textContent.trim();
    return (el.value||"").trim();
  }
  function getStatusValue(){
    var ln = findLabelNode(LABELS.status); if(!ln) return "";
    var edit = findEditorNearLabel(ln);
    var disp = edit ? null : findDisplayValueNode(ln);
    if (edit){
      if (edit.tagName==="SELECT"){
        var i=edit.selectedIndex; return i>=0 ? (edit.options[i].text||"").trim() : "";
      }
      return (edit.value||"").trim();
    }
    return norm(disp && disp.textContent || "");
  }

  /* --- command bar buttons --- */
  var BUTTONS = { save:null, addNew:null };
  function textOf(el){
    return norm(((el && (el.innerText||el.textContent))||"")+" "+
                (el && (el.getAttribute("aria-label")||""))+" "+
                (el && (el.getAttribute("title")||"")));
  }
  function findButtons(){
    var containers = qa(".iw-commandBar, .ms-CommandBar, [role='menubar'], .commandBar, .ms-OverflowSet");
    if (!containers.length) containers = [document];
    var candidates = [];
    containers.forEach(function(c){ candidates = candidates.concat(qa("button, a, div[role='button'], span[role='button']", c)); });

    var save=null, add=null;
    for (var i=0;i<candidates.length;i++){
      var t = textOf(candidates[i]).toLowerCase();
      // Save (but not Save & New)
      if (!save && /\bsave\b/.test(t) && !/\bnew\b/.test(t)) save = candidates[i];
      // Save & New / Add New (covers “Save and new”, “Save & New”, “Add New”)
      if (!add && (/\bsave\b/.test(t) && /\bnew\b/.test(t) || /\badd\b.*\bnew\b/.test(t))) add = candidates[i];
      if (save && add) break;
    }
    if (save) BUTTONS.save = save;
    if (add)  BUTTONS.addNew = add;
  }
  function setBtnDisabled(el, on){
    if (!el) return;
    if (on){
      el.setAttribute("aria-disabled","true");
      if ("disabled" in el) el.disabled = true;
      el.style.pointerEvents="none"; el.style.opacity="0.45"; el.style.filter="grayscale(0.4)";
    } else {
      el.removeAttribute("aria-disabled");
      if ("disabled" in el) el.disabled = false;
      el.style.pointerEvents=""; el.style.opacity=""; el.style.filter="";
    }
  }
  function disableBoth(){ findButtons(); setBtnDisabled(BUTTONS.save, true); setBtnDisabled(BUTTONS.addNew, true); }

  /* --- gate logic --- */
  function criteriaMet(){
    var project = getLookupText();
    var status  = getStatusValue();
    if (!project) return false;                // must pick a project
    if (!status)  return false;                // wait until status fetched/resolved
    return BLOCKED.indexOf(status.toLowerCase()) === -1;
  }
  function updateButtons(){
    findButtons(); // in case bar re-rendered
    var ok = criteriaMet();
    setBtnDisabled(BUTTONS.save,   !ok);
    setBtnDisabled(BUTTONS.addNew, !ok);
  }

  /* --- init + watchers --- */
  disableBoth();            // start disabled no matter what
  updateButtons();          // then evaluate once

  // Listen to changes on Project + Status
  (function wireField(label){
    var ln = findLabelNode(label); if(!ln) return;
    var el = findEditorNearLabel(ln);
    var row = (el && (el.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, div")||el.parentElement)) || ln.parentElement;
    ["change","input","keyup","blur"].forEach(function(ev){
      if (el) el.addEventListener(ev, updateButtons, true);
    });
    if (row && window.MutationObserver){
      new MutationObserver(function(){ updateButtons(); })
        .observe(row, {subtree:true, childList:true, attributes:true, characterData:true});
    }
  })(LABELS.lookup);
  (function wireStatus(){
    var ln = findLabelNode(LABELS.status); if(!ln) return;
    var el = findEditorNearLabel(ln);
    var row = (el && (el.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, div")||el.parentElement)) || ln.parentElement;
    ["change","input","keyup","blur"].forEach(function(ev){
      if (el) el.addEventListener(ev, updateButtons, true);
    });
    if (row && window.MutationObserver){
      new MutationObserver(function(){ updateButtons(); })
        .observe(row, {subtree:true, childList:true, attributes:true, characterData:true});
    }
  })();

  // Re-check if the command bar re-renders
  if (window.MutationObserver){
    new MutationObserver(function(){ findButtons(); updateButtons(); })
      .observe(document.body, {subtree:true, childList:true, attributes:true});
  }
  // small safety poll (covers async fetches)
  var ticks=0, t=setInterval(function(){ updateButtons(); if(++ticks>40) clearInterval(t); }, 500);
})();

(function(){
  // >>> Edit these to EXACT captions you see on the canvas <<<
  var CANDIDATE_LOOKUP_CAPTIONS = ["Project","Project Name","Project (lookup)"]; // try exact label(s)
  var SECTION_TITLE     = "Rest of Form";
  var IDCOPY_CAPTION    = "Project ID (copy)";

  function wait(cb){var t=0;(function p(){ if(window.infowiseForm){cb();} else if(t++<200){setTimeout(p,50);} })();}

  wait(function(){
    function found(x){ return x ? "YES" : "NO"; }

    // Try multiple possible lookup captions until one resolves
    var project=null, usedCaption=null;
    for (var i=0;i<CANDIDATE_LOOKUP_CAPTIONS.length;i++){
      try { project = infowiseForm.getField(CANDIDATE_LOOKUP_CAPTIONS[i]); } catch(e){ project=null; }
      if (project){ usedCaption = CANDIDATE_LOOKUP_CAPTIONS[i]; break; }
    }

    var section = null, idField = null;
    try { section = infowiseForm.getSection(SECTION_TITLE); } catch(e){}
    try { idField = infowiseForm.getField(IDCOPY_CAPTION); } catch(e){}

    // Show what we actually found
    alert(
      "Found lookup? " + found(project) + (usedCaption ? (" (caption: " + usedCaption + ")") : "") + "\n" +
      "Found section? " + found(section) + " (title: " + SECTION_TITLE + ")\n" +
      "Found ID field? " + found(idField) + " (caption: " + IDCOPY_CAPTION + ")"
    );

    if (!project) { alert("→ Update CANDIDATE_LOOKUP_CAPTIONS to the EXACT label shown on your form."); return; }
    if (!section) { alert("→ Update SECTION_TITLE to the EXACT section title."); return; }
    if (!idField) { alert("→ Update IDCOPY_CAPTION to the EXACT field caption."); return; }

    // Try all known ways to read a lookup ID and show it
    function readProjectId(){
      try {
        if (typeof project.getLookupId === "function") {
          var id = project.getLookupId();
          if (id) return id;
        }
        if (typeof project.getValue === "function") {
          var v = project.getValue(); // number | string | {id,value} | array | null
          if (typeof v === "number") return v;
          if (typeof v === "string" && /^\d+$/.test(v)) return parseInt(v,10);
          if (Array.isArray(v) && v.length) {
            var a=v[0]; if (typeof a==="number") return a;
            if (typeof a==="string" && /^\d+$/.test(a)) return parseInt(a,10);
            if (a && typeof a==="object" && ("id" in a)) return a.id;
          }
          if (v && typeof v==="object" && ("id" in v)) return v.id;
        }
      } catch(e){}
      return null;
    }

    function setId(val){ try { idField.setValue(val != null ? String(val) : ""); } catch(e){} }
    function setVisible(vis){ try { section.setVisible(!!vis); } catch(e){} }

    // Initial state: hide until selected
    (function update(){
      var id = readProjectId();
      setId(id || "");
      setVisible(!!id);
    })();

    // React to changes (some builds fire on blur)
    if (typeof project.onChange === "function") {
      project.onChange(function(){
        var id = readProjectId();
        setId(id || "");
        setVisible(!!id);
        alert("Lookup changed. New ID: " + (id==null? "(none)": id)); // remove after confirming it fires
      });
    } else {
      alert("Lookup has no onChange; we’ll detect changes for ~15s via polling. Tab out of the field after selecting.");
      var last=null, ticks=0, t=setInterval(function(){
        var id = readProjectId();
        if (id!==last) {
          last = id;
          setId(id || "");
          setVisible(!!id);
          alert("Detected change via poll. New ID: " + (id==null? "(none)": id)); // remove after confirming
        }
        if (++ticks>60) clearInterval(t);
      },250);
    }
  });
})();

(function () {
  var PROJECT_LIST_TITLE = "Project Names";
  var LABELS = { lookup: "Project", statusOut: "Status", idOut: "Project ID" };

  // Prefer CSS class on the container; header text is fallback
  var SECTION_CLASS = "rest-of-form";
  var SECTION_HEADER_TEXT = "Rest of Form";

  // --- small helpers ---
  function norm(t){ return String(t||"").replace(/\s+/g," ").replace(/\s*\*+$/,"").trim(); }
  function q(sel,root){ return (root||document).querySelector(sel); }
  function qa(sel,root){ return Array.prototype.slice.call((root||document).querySelectorAll(sel)); }
  function findLabelNode(txt){
    var want=norm(txt).toLowerCase(), nodes=qa("label,.ms-Label,.infowise-label,th,[data-field-label]");
    for (var i=0;i<nodes.length;i++){ if (norm(nodes[i].innerText||"").toLowerCase()===want) return nodes[i]; }
    return null;
  }
  function findEditorNearLabel(labelNode){
    if (!labelNode) return null;
    var forId=labelNode.getAttribute("for");
    if (forId){ var el=document.getElementById(forId); if (el && /INPUT|SELECT|TEXTAREA/.test(el.tagName)) return el; }
    var row=labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div")||labelNode.parentElement;
    if (row){ var el2=q("input, select, textarea, [role='combobox'], [contenteditable='true']", row); if (el2) return el2; }
    var sib=labelNode.nextElementSibling;
    while(sib){ var el3=sib.querySelector&&sib.querySelector("input, select, textarea, [role='combobox'], [contenteditable='true']"); if(el3) return el3; sib=sib.nextElementSibling; }
    return null;
  }
  function findDisplayValueNode(labelNode){
    if (!labelNode) return null;
    var row=labelNode.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, .ms-Grid, div")||labelNode.parentElement;
    var cands=[".iw-control-value",".field-value",".ms-TextField-field",".ms-TextField-wrapper",".value","span","div"];
    for (var i=0;i<cands.length;i++){
      var n=q(cands[i],row); if(!n||n===labelNode) continue;
      if (n.querySelector && n.querySelector("label,.ms-Label,.infowise-label")) continue;
      return n;
    }
    return null;
  }
  function findSectionElement(){
    var el=q("."+SECTION_CLASS); if(el) return el;
    var heads=qa('[role="heading"], h1, h2, h3, h4');
    for (var i=0;i<heads.length;i++){
      if (norm(heads[i].innerText||"").toLowerCase()===SECTION_HEADER_TEXT.toLowerCase())
        return heads[i].closest("section, .ms-Grid-row, .iw-container, .ms-Stack, div")||heads[i].parentElement;
    }
    return null;
  }
  function setControlValue(inputEl, displayEl, val){
    var text=(val==null?"":String(val));
    if (inputEl){
      if (inputEl.tagName==="SELECT"){
        var opt=qa("option",inputEl).find(function(o){return o.value==text;});
        if(!opt && text){ opt=document.createElement("option"); opt.value=text; opt.text=text; inputEl.appendChild(opt); }
        inputEl.value=text;
      } else { inputEl.value=text; }
      var e1=document.createEvent("HTMLEvents"); e1.initEvent("input",true,false);  inputEl.dispatchEvent(e1);
      var e2=document.createEvent("HTMLEvents"); e2.initEvent("change",true,false); inputEl.dispatchEvent(e2);
    } else if (displayEl){
      displayEl.textContent=text; displayEl.style.minHeight="1.2em";
    }
  }
  function setInputReadOnly(el,on){
    if(!el) return;
    if(/INPUT|TEXTAREA/.test(el.tagName)){
      el.readOnly=!!on; el.setAttribute("aria-readonly",on?"true":"false");
      el.style.background=on?"#f5f5f5":""; el.style.pointerEvents=on?"none":"";
    } else if (el.tagName==="SELECT"){
      el.setAttribute("data-locked","1");
      el.addEventListener("mousedown",function(e){ if(el.getAttribute("data-locked")==="1") e.preventDefault(); },true);
      el.style.background=on?"#f5f5f5":""; el.style.pointerEvents=on?"none":"";
    }
  }
  function hide(el){ if(el) el.style.display="none"; }
  function show(el){ if(el) el.style.display=""; }

  // read lookup text/id from various renderers
  function getLookupText(lookupEl){
    if (!lookupEl) return "";
    if (lookupEl.tagName==="SELECT"){
      var i=lookupEl.selectedIndex; return i>=0?(lookupEl.options[i].text||"").trim():"";
    }
    var row=lookupEl.closest(".iw-control, .ms-Grid-row, .row, .ms-Stack, div")||lookupEl.parentElement;
    var tkn=row&&(q("[data-value]",row)||q(".ms-BasePicker-text,.selected,.tagItemText,.pickerText",row));
    if(tkn && tkn.textContent) return tkn.textContent.trim();
    return (lookupEl.value||"").trim();
  }
  function getLookupId(lookupEl){
    if (!lookupEl) return null;
    if (lookupEl.tagName==="SELECT"){
      var v=lookupEl.value; return v && /^\d+$/.test(v) ? parseInt(v,10) : (v||null);
    }
    var dataId=lookupEl.getAttribute("data-id")||lookupEl.getAttribute("data-itemid")||lookupEl.getAttribute("data-entityid");
    if (dataId){ return /^\d+$/.test(dataId)?parseInt(dataId,10):dataId; }
    if (lookupEl.value && /^\d+$/.test(lookupEl.value)) return parseInt(lookupEl.value,10);
    var row=lookupEl.closest(".ms-Grid-row, .row, .iw-control, .ms-Stack, div")||lookupEl.parentElement;
    if(row){
      var hids=qa('input[type="hidden"]',row);
      for (var i=0;i<hids.length;i++){
        var nm=(hids[i].name||"")+" "+(hids[i].id||"");
        var val=hids[i].value||""; if(!val) continue;
        if (/\b(Id|ID|_Id|Lookup|EntityId|ItemId)\b/.test(nm)) return /^\d+$/.test(val)?parseInt(val,10):val;
      }
    }
    return null;
  }

  // REST utils
  function esc(s){ return String(s||"").replace(/'/g,"''"); }
  function fetchById(id, cb){
    if(!id){ cb(null); return; }
    var url=_spPageContextInfo.webAbsoluteUrl+
      "/_api/web/lists/getbytitle('"+encodeURIComponent(PROJECT_LIST_TITLE)+"')/items("+id+")?$select=*";
    fetch(url,{headers:{Accept:"application/json;odata=nometadata"}})
      .then(function(r){return r.ok?r.json():Promise.reject();})
      .then(function(d){cb(d);}).catch(function(){cb(null);});
  }
  function fetchByTitle(title, cb){
    if(!title){cb(null);return;}
    var url=_spPageContextInfo.webAbsoluteUrl+
      "/_api/web/lists/getbytitle('"+encodeURIComponent(PROJECT_LIST_TITLE)+"')/items?$select=*&$filter=Title eq '"+esc(title)+"'&$top=1";
    fetch(url,{headers:{Accept:"application/json;odata=nometadata"}})
      .then(function(r){return r.ok?r.json():Promise.reject();})
      .then(function(d){cb(d && d.value && d.value[0]?d.value[0]:null);}).catch(function(){cb(null);});
  }

  // choose keys dynamically (handles ProjectId vs Project_x0020_Id etc.)
  function encSpaces(s){ return s ? s.replace(/ /g,"_x0020_") : s; }
  function canon(s){ return String(s||"").toLowerCase().replace(/_x00[0-9a-f]{2}_/g," ").replace(/[^a-z0-9]/g,""); }
  function pickKey(rec, preferredList, mustContain){
    if(!rec) return null;
    var keys=Object.keys(rec), i,k,enc;
    // try preferred list (and their _x0020_ variants)
    for(i=0;i<preferredList.length;i++){
      k=preferredList[i]; enc=encSpaces(k);
      if (rec.hasOwnProperty(k)) return k;
      if (enc && rec.hasOwnProperty(enc)) return enc;
    }
    // fuzzy equal/contains
    var want=canon(mustContain||preferredList[0]||"");
    for(i=0;i<keys.length;i++){ if(canon(keys[i])===want) return keys[i]; }
    for(i=0;i<keys.length;i++){ if(want && canon(keys[i]).indexOf(want)>=0) return keys[i]; }
    return null;
  }

  // --- resolve form elements ---
  var lookupNode=findLabelNode(LABELS.lookup);
  var statusNode=findLabelNode(LABELS.statusOut);
  var idNode    =findLabelNode(LABELS.idOut);

  var lookupEl  =findEditorNearLabel(lookupNode);
  var statusIn  =findEditorNearLabel(statusNode), statusDisp=statusIn?null:findDisplayValueNode(statusNode);
  var projIdIn  =findEditorNearLabel(idNode),     projIdDisp =projIdIn?null:findDisplayValueNode(idNode);
  var sectionEl =findSectionElement();

  if(!lookupEl || !sectionEl || !(statusIn||statusDisp) || !(projIdIn||projIdDisp)) return;

  // keep fields Write so they save; make inputs functionally read-only
  setInputReadOnly(statusIn,true);
  setInputReadOnly(projIdIn,true);

  var lastKey="", announced=false;

  function applyRecord(rec){
    // Auto-detect keys once per fetch
    var statusKey = pickKey(rec, ["Status","Project Status","ProjectStatus"], "status");
    var idKey     = pickKey(rec, ["ProjectId","Project ID","Project Id","ProjectID","Project_x0020_Id","PID","ProjectNumber","ID"], "projectid");

    if (!announced) {
      // one-time tiny panel to show what keys were used
      try{
        var d=document.createElement("div");
        d.style.cssText="position:fixed;bottom:8px;right:8px;z-index:999999;max-width:440px;background:#111;color:#fff;font:12px system-ui;padding:8px 10px;border-radius:8px;box-shadow:0 4px 16px rgba(0,0,0,.35)";
        d.innerHTML="<b>Projects fetch:</b><br>picked status key: <code>"+(statusKey||"(none)")+"</code><br>picked id key: <code>"+(idKey||"(none)")+"</code>";
        document.body.appendChild(d); setTimeout(function(){ d.remove(); }, 5000);
      }catch(_){}
      announced=true;
    }

    var statusVal = statusKey ? rec[statusKey] : "";
    var bizIdVal  = idKey ? rec[idKey] : null;
    if (bizIdVal==null && rec && rec.ID!=null) bizIdVal = rec.ID; // fallback

    setControlValue(statusIn, statusDisp, statusVal || "");
    setControlValue(projIdIn,  projIdDisp,  bizIdVal!=null ? bizIdVal : "");
  }

  function update(){
    var id=getLookupId(lookupEl);
    var text=getLookupText(lookupEl);
    if (id!=null || (text && text.length)) show(sectionEl); else { hide(sectionEl); applyRecord(null); }

    var key=(id!=null ? "id:"+id : "t:"+text);
    if (!key || key===lastKey) return;
    lastKey=key;

    if (id!=null) fetchById(id, applyRecord);
    else if (text) fetchByTitle(text, applyRecord);
    else applyRecord(null);
  }

  update();
  ["change","input","keyup"].forEach(function(ev){ lookupEl.addEventListener(ev, update, true); });
  lookupEl.addEventListener("blur", function(){ setTimeout(update,0); }, true);
  var ticks=0, t=setInterval(function(){ update(); if(++ticks>30) clearInterval(t); }, 500);
})();

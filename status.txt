(function(){
  // ===== YOU CAN LEAVE THESE BLANK; THE SCRIPT WILL AUTO-DISCOVER =====
  // If you already know the exact captions, you can prefill these:
  var LOOKUP_HINT  = "";  // e.g., "Project" (exact label next to the lookup)
  var SECTION_HINT = "";  // e.g., "Rest of Form" (container header text)
  var IDCOPY_HINT  = "";  // e.g., "Project ID (copy)" (label of your display field)
  // =====================================================================

  // progress badge
  var badgeEl;
  function badge(msg, color){
    try{
      if(!badgeEl){
        badgeEl=document.createElement("div");
        badgeEl.style.cssText="position:fixed;top:8px;right:8px;z-index:999999;padding:8px 10px;border-radius:6px;font:12px system-ui;color:#fff;box-shadow:0 2px 8px rgba(0,0,0,.2)";
        document.body.appendChild(badgeEl);
      }
      badgeEl.textContent=msg;
      badgeEl.style.background=color||"#2d7";
    }catch(e){}
  }

  badge("Open: waiting for InfoWise API…","#666");

  // wait for InfoWise API (up to ~60s)
  function wait(cb){
    var tries=0, max=600;
    (function poll(){
      if(window.infowiseForm && typeof infowiseForm.getField==="function"){
        badge("Open: InfoWise API ready");
        cb();
      }else if(tries++<max){
        setTimeout(poll,100);
      }else{
        badge("Timeout: InfoWise API not detected","#e67");
      }
    })();
  }

  function textCandidates(){
    var out=[], seen={};
    function add(t){
      if(!t) return;
      var v1=t.trim();
      var v2=v1.replace(/\s*\*+$/,"").trim();      // strip trailing required asterisks
      var v3=v1.replace(/\*/g,"").trim();          // strip all asterisks
      [v1,v2,v3].forEach(function(v){
        if(v && !seen[v]){ seen[v]=1; out.push(v); }
      });
    }
    var sel='label,[role="heading"],.ms-Label,.infowise-label,h1,h2,h3,h4,th';
    var nodes=document.querySelectorAll(sel);
    for(var i=0;i<nodes.length;i++){ add(nodes[i].innerText||""); }
    // user hints go to the front if provided
    if(LOOKUP_HINT){ out.unshift(LOOKUP_HINT); }
    if(SECTION_HINT){ out.unshift(SECTION_HINT); }
    if(IDCOPY_HINT){ out.unshift(IDCOPY_HINT); }
    return out;
  }

  wait(function init(){
    // 1) find lookup
    var project=null, projectLabel="(not found)";
    var candidates=textCandidates();

    for(var i=0;i<candidates.length;i++){
      try{ project=infowiseForm.getField(candidates[i]); }catch(e){ project=null; }
      if(project){ projectLabel=candidates[i]; break; }
    }

    // 2) find section by title, else by CSS class (.rest-of-form)
    var section=null, sectionTitle="(not found)", sectionEl=null;
    for(var j=0;j<candidates.length;j++){
      try{ section=infowiseForm.getSection(candidates[j]); }catch(e){ section=null; }
      if(section){ sectionTitle=candidates[j]; break; }
    }
    if(!section){
      sectionEl=document.querySelector(".rest-of-form") || document.querySelector(".Rest.of.Form");
      if(sectionEl){
        section={
          setVisible:function(v){ sectionEl.style.display=v?"":"none"; },
          setReadOnly:function(ro){
            var nl=sectionEl.querySelectorAll("input,select,textarea,button");
            for(var k=0;k<nl.length;k++){ nl[k].disabled=!!ro; }
          }
        };
        sectionTitle="(via CSS class .rest-of-form)";
      }
    }

    // 3) find ID display field
    var idField=null, idLabel="(not found)";
    // try obvious
    var idCandidates=["Project ID (copy)","Project ID","Project Id","Project id"];
    candidates = idCandidates.concat(candidates.filter(function(t){ return /project/i.test(t)&&/\bid\b/i.test(t); }));
    for(var m=0;m<candidates.length;m++){
      try{ idField=infowiseForm.getField(candidates[m]); }catch(e){ idField=null; }
      if(idField){ idLabel=candidates[m]; break; }
    }

    badge("Resolved → Lookup: "+projectLabel+" | Section: "+sectionTitle+" | ID field: "+idLabel,
          (project && section && idField) ? "#2d7" : "#e67");

    if(!project || !section || !idField){
      // stop here; captions not resolved
      return;
    }

    // helpers
    function setVisible(v){ try{ section.setVisible(!!v); }catch(e){} }
    function setId(val){ try{ idField.setValue(val!=null?String(val):""); }catch(e){} }

    function readProjectId(){
      try{
        if(typeof project.getLookupId==="function"){
          var id=project.getLookupId(); if(id) return id;
        }
        if(typeof project.getValue==="function"){
          var v=project.getValue(); // number|string|{id,value}|array|null
          if(typeof v==="number") return v;
          if(typeof v==="string" && /^\d+$/.test(v)) return parseInt(v,10);
          if(v && typeof v==="object" && ("id" in v)) return v.id;
          if(Object.prototype.toString.call(v)==='[object Array]' && v.length){
            var a=v[0];
            if(typeof a==="number") return a;
            if(typeof a==="string" && /^\d+$/.test(a)) return parseInt(a,10);
            if(a && typeof a==="object" && ("id" in a)) return a.id;
          }
        }
      }catch(e){}
      return null;
    }

    function update(){
      var id=readProjectId();
      setId(id||"");
      setVisible(!!id); // hide until a project is selected
    }

    // initial + change (some builds fire change on blur)
    update();
    if(typeof project.onChange==="function"){
      project.onChange(update);
    }else{
      var last=null;
      setInterval(function(){
        var cur=readProjectId();
        if(cur!==last){ last=cur; update(); }
      },500);
    }
  });
})();
